'use strict';

(function (app) {
    'use strict';
})(angular.module('app', ['ui.router', 'ngCookies', 'app.views', 'app.config', 'app.services', 'app.login', 'app.game']));
;'use strict';

(function (app) {
  'use strict';
})(angular.module('app.game', []));
;'use strict';

(function (app) {})(angular.module('app.login', []));
;'use strict';

(function (app) {
    'use strict';
})(angular.module('app.config', []));
;'use strict';

(function (app) {})(angular.module('app.services', []));
;'use strict';

(function (app) {
    'use strict';

    app.component('game', {
        templateUrl: 'js/components/game/game.html',
        controller: ['usersService', '$state', 'socket', '$scope', function (usersService, $state, socket, $scope) {
            angular.extend(this, {
                $onInit: function $onInit() {
                    var _this = this;

                    var table = [[{
                        player: "",
                        value: ""
                    }, {
                        player: "",
                        value: ""
                    }, {
                        player: "",
                        value: ""
                    }], [{
                        player: "",
                        value: ""
                    }, {
                        player: "",
                        value: ""
                    }, {
                        player: "",
                        value: ""
                    }], [{
                        player: "",
                        value: ""
                    }, {
                        player: "",
                        value: ""
                    }, {
                        player: "",
                        value: ""
                    }]];

                    this.tic = table;

                    //if disconnect, go to login page
                    usersService.getCurrent().then(function (user) {
                        _this.currentUser = user;
                        socket.emit('userInfos', _this.currentUser);
                    }).catch(function () {
                        $state.go('app.login');
                    });

                    // Get Player 2
                    socket.on('allUsers', function (OtherUser) {
                        _this.otherUser = OtherUser.filter(function (a) {
                            return a._id !== _this.currentUser._id;
                        });
                    });

                    // receive new table
                    socket.on('playValue', function (socket) {
                        _this.tic = socket.tic;
                    });
                },

                //emit on click
                click: function click(ptidx, idx) {
                    var tic = this.tic;
                    tic[ptidx][idx].value = 'x';
                    socket.emit('play', {
                        ptidx: ptidx,
                        idx: idx,
                        tic: tic
                    });
                },
                disconnect: function disconnect() {
                    usersService.disconnect().then(function (res) {
                        $state.go('app.login').then(function () {
                            $state.reload();
                        });
                    });
                }
            });
        }]
    });
})(angular.module('app.game'));
;'use strict';

(function (app) {
    'use strict';

    app.component('login', {
        templateUrl: 'js/components/login/login.html',
        controller: ['usersService', '$state', function (usersService, $state) {
            angular.extend(this, {
                $onInit: function $onInit() {},
                connect: function connect() {
                    usersService.connect(this.user).then(function (res) {
                        $state.go('app.game').then(function () {
                            $state.reload();
                        });
                    });
                },

                // add User
                add: function add() {
                    var _this = this;

                    usersService.add(this.newUser).then(function (res) {
                        usersService.connect(_this.newUser).then(function (res) {
                            $state.go('app.game').then(function () {
                                $state.reload();
                            });
                        });
                    });
                }
            });
        }]
    });
})(angular.module('app.login'));
;'use strict';

(function (app) {
    'use strict';

    app.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider.state('app', {
            url: '',
            abstract: true,
            template: '<ui-view></ui-view>'
        }).state('app.game', {
            url: '/',
            template: '<game></game>'
        }).state('app.login', {
            url: '/login',
            template: '<login></login>'
        }).state('callback', {
            url: '/auth/callback/:token',
            template: '',
            controller: ['usersService', '$stateParams', '$state', function (usersService, $stateParams, $state) {
                if ($stateParams.token) {
                    usersService.setToken($stateParams.token).then(function (user) {
                        $state.go('app.login');
                    });
                } else {
                    $state.go('app.login');
                }
            }]
        });
    }]);
})(angular.module('app.config'));
;'use strict';

(function (app) {
    'use strict';

    app.factory('socket', function ($rootScope) {
        var socket = io.connect('http://localhost:9000/tictactoe');
        return {
            on: function on(eventName, callback) {
                socket.on(eventName, function () {
                    var args = arguments;
                    $rootScope.$apply(function () {
                        callback.apply(socket, args);
                    });
                });
            },
            emit: function emit(eventName, data, callback) {
                socket.emit(eventName, data, function () {
                    var args = arguments;
                    $rootScope.$apply(function () {
                        if (callback) {
                            callback.apply(socket, args);
                        }
                    });
                });
            }
        };
    });
})(angular.module('app.services'));
;'use strict';

(function (app) {
    'use strict';

    app.service('usersService', ['$http', '$cookies', '$q', '$window', function ($http, $cookies, $q, $window) {
        return {
            get: function get() {
                return $http.get('/api/users');
            },
            getPopulate: function getPopulate(users) {
                return $http.get('/api/users/' + users.userId);
            },
            add: function add(newUser) {
                return $http.post('/api/users', newUser);
            },
            edit: function edit(user) {
                return $http.put('/api/users/' + user._id, user);
            },
            delete: function _delete(user) {
                return $http.delete('/api/users/' + user._id);
            },
            connect: function connect(data) {
                var _this = this;

                return $http.post('/api/auth', data).then(function (res) {
                    _this.currentUser = res.data.user;
                    $cookies.put('token', res.data.token);
                });
            },
            disconnect: function disconnect() {
                var _this2 = this;

                return new Promise(function (resolve, reject) {
                    $cookies.remove("token");
                    _this2.currentUser = null;
                    resolve();
                });
            },
            getCurrent: function getCurrent() {

                var deferred = $q.defer();
                if (!$cookies.get('token')) {
                    deferred.reject();
                } else {
                    if (!this.currentUser) {
                        var payload = $cookies.get('token').split('.')[1];
                        payload = $window.atob(payload);
                        payload = JSON.parse(payload);
                        this.currentUser = payload._doc;
                        if (Math.round(new Date().getTime() / 1000) > payload.exp) return this.disconnect();
                    }
                    deferred.resolve(this.currentUser);
                }

                return deferred.promise;
            }
        };
    }]);
})(angular.module('app.services'));
;
//# sourceMappingURL=app.min.js.map